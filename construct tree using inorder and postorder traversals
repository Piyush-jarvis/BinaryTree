

//Function to return a tree created from postorder and inoreder traversals.
int CreateMapping(int in[], map<int,int> &nodeToIndex, int n)//node element and number
    {
        for(int i = 0; i < n; i ++)
        {
            nodeToIndex[in[i]] = i;
        }
        
    }
    
Node* solve(int in[], int post[], int &index, int inorderStart, int inorderEnd, int n, map<int,int> &nodeToIndex)
    {
        if(index < 0 || inorderStart > inorderEnd)
        {
            return NULL;
        }
        
        int element = post[index--];
        Node* root = new Node(element);
        int position = nodeToIndex[element];
        //in case of postorder and inoirder we i=first crete right sub tree first
        root->right = solve(in , post, index, position+1, inorderEnd,n,nodeToIndex);
        root->left = solve(in , post, index, inorderStart, position-1,n,nodeToIndex);
        return root;
    }
    
Node *buildTree(int in[], int post[], int n) {
    // Your code here
        int postorderIndex = n-1;
        map<int, int>nodeToIndex;
        CreateMapping(in,nodeToIndex,n);
        Node* ans = solve(in,post,postorderIndex,0,n-1,n,nodeToIndex);
        return ans;
}
