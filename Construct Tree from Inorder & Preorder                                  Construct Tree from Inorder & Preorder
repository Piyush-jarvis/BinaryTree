
class Solution{
    public:
    int CreateMapping(int in[], map<int,int> &nodeToIndex, int n)//node element and number
    {
        for(int i = 0; i < n; i ++)
        {
            nodeToIndex[in[i]] = i;
        }
        
    }
    
    Node* solve(int in[], int pre[], int &index, int inorderStart, int inorderEnd, int n, map<int,int> &nodeToIndex)
    {
        if(index > n || inorderStart > inorderEnd)
        {
            return NULL;
        }
        int element = pre[index++];
        Node* root = new Node(element);
        int position = nodeToIndex[element];
        
        root->left = solve(in , pre, index, inorderStart, position-1,n,nodeToIndex);
        root->right = solve(in , pre, index, position+1, inorderEnd,n,nodeToIndex);
        return root;
    }
    
    Node* buildTree(int in[],int pre[], int n)
    {
        // Code here
        int preorderIndex = 0;
        map<int, int>nodeToIndex;
        CreateMapping(in,nodeToIndex,n);
        Node* ans = solve(in,pre,preorderIndex,0,n-1,n,nodeToIndex);
        return ans;
    }
}; 


//{ Driver Code Starts.
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		int n;
		cin>>n;
		
		int inorder[n], preorder[n];
		for(int i=0; i<n; i++)
			cin>> inorder[i];
		for(int i=0; i<n; i++)
			cin>> preorder[i];
		Solution obj;
		Node *root = obj.buildTree(inorder, preorder, n);
		printPostOrder(root);
		cout<< endl;
	}
}

// } Driver Code Ends
