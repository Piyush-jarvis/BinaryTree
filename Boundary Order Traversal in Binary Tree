************************************************************/
void TraverseLeft(TreeNode<int>* root, vector<int>&ans)
{
    if((root == NULL) || (root->left == NULL && root->right == NULL))
    {
        return;
    }
    ans.push_back(root->data);
    if(root->left)
    {
        TraverseLeft(root->left, ans);
    }
    else
    {
        TraverseLeft(root->right,ans);
    }
}
void TraverseLeaf(TreeNode<int>* root, vector<int>&ans)
{
    if(root == NULL)
    {
        return;
    }
    if(root->left == NULL && root->right == NULL)
    {
        ans.push_back(root->data);
        return;
    }
    TraverseLeaf(root->left,ans);
    TraverseLeaf(root->right,ans);
}
void TraverseRight(TreeNode<int>* root, vector<int>&ans)
{
    if((root == NULL) || (root->left == NULL && root->right == NULL))
    {
        return;
    }

    if(root->right)
    {
        TraverseRight(root->right,ans);
    }
    else
    {
        TraverseRight(root->left,ans);
    }
    ans.push_back(root->data);
}

vector<int> traverseBoundary(TreeNode<int>* root){
    // Write your code here.
    vector<int> ans;
    if(root == NULL)
    {
        return ans;
    }
    ans.push_back(root->data);
    //traverse left part and printing
    TraverseLeft(root->left, ans);
    //traverse leaf part and printing
    TraverseLeaf(root->left, ans);
    TraverseLeaf(root->right, ans);
    //traverse right part and printing
    TraverseRight(root->right, ans);
}
