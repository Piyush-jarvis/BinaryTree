////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                            TC - O(N)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:

    pair <bool,int> isBalancedFast(TreeNode* root)
    {
        if(root == NULL)
        {
            pair<bool,int> p = make_pair(true,0);
            return p;
        }

        pair<bool,int> left = isBalancedFast(root->left);
        pair<bool,int> right = isBalancedFast(root->right);

        bool leftAns = left.first;
        bool rightAns = right.first;
        
        bool diff = abs(left.second - right.second) <= 1;

        pair<bool,int>ans;
        if(leftAns && rightAns && diff)
        {
            ans.first = 1;
        }
        else
        {
            ans.first = false;
        }

        ans.second = max(left.second,right.second) + 1;

        return ans;
    }

    bool isBalanced(TreeNode* root) {
        return isBalancedFast(root).first;
    }
};


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                            TC - O(N^2)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
private:
    int height(TreeNode* root)
    {
        if( root == NULL)
        {
            return 0;
        }

        int left = height(root->left);
        int right = height(root->right);
        int ans = max(left,right) + 1;

        return ans;
    }
public:
    bool isBalanced(TreeNode* root) {
        if(root == NULL)
        {
            return true;
        }
        bool left = isBalanced(root->left);
        bool right = isBalanced(root->right);

        bool diff = abs(height(root->left) - height(root->right)) <= 1;

        if( left && right && diff)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
};
