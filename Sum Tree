////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
									Expected Time Complexity: O(N)
Expected Auxiliary Space: O(Height of the Tree)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution
{
    public:
    pair<bool,int> isSumTreeFast(Node* root)
    {
        if(root == NULL)
         {
             pair<bool,int> p = make_pair(true,0);
             return p;
         }
         if(root->left == NULL && root->right == NULL)
         {
             pair<bool,int> p = make_pair(true,root->data);
             return p;
         }
         
         pair<bool,int> leftAns = isSumTreeFast(root->left);
         pair<bool,int> rightAns = isSumTreeFast(root->right);
         
         bool isleftSum = leftAns.first;
         bool isrightSum = rightAns.first;
         
         int leftSum = leftAns.second;
         int rightSum = rightAns.second;
         
         bool cond = (root->data == (leftSum + rightSum));
         
         pair<bool,int> ans;
         
         if(isleftSum && isrightSum && cond)
         {
             ans.first = true;
             ans.second = 2*root->data;
         }
         
         return ans;
         
    }
    
    bool isSumTree(Node* root)
    {
         // Your code here
         return isSumTreeFast(root).first;
    }
};

int main()
{

    int t;
	scanf("%d ",&t);
    while(t--)
    {
        string s;
		getline(cin,s);
        Node* root = buildTree(s);
        Solution ob;
        cout <<ob.isSumTree(root) << endl;
    }
    return 1;
}
// } Driver Code Ends
