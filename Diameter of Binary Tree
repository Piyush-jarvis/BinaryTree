//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                      TC - O(N^2)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
private:
    int height(TreeNode* root)
    {
        if(root == NULL)
        {
            return 0;
        }
        int left = height(root->left);
        int right = height(root->right);
        int ans = max(left,right) + 1;

        return ans;
    }
public:
    int diameterOfBinaryTree(TreeNode* root) {
        if(root == NULL)
        {
            return 0;
        }

        int op1 = diameterOfBinaryTree(root->left);
        int op2 = diameterOfBinaryTree(root->right);
        int op3 = height(root->left) + height(root->right);

        int ans = max(op1,max(op2,op3));

        return ans;
    }
};


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                      TC - O(N)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

pair<int,int> diameterOfBinaryTreeFast(BinaryTreeNode<int>* node)
{
    if(node == NULL)
    {
        pair<int,int>p = make_pair(0,0);
        return p;
    }
    pair<int,int> left = diameterOfBinaryTreeFast(node->left);
    pair<int,int> right = diameterOfBinaryTreeFast(node->right);
    
    int op1 = left.first;
    int op2 = right.second;
    int op3 = left.second + right.second + 1;
    
    pair<int,int> ans;
    ans.first =  max(op1,max(op2,op3));
    ans.second = max(left.second,right.second) + 1;
    return ans;
}


int diameterOfBinaryTree(BinaryTreeNode<int>* node) {
	// Write your code here
    return diameterOfBinaryTreeFast(node).first;
}

